import usb.core
import usb.util
import usb.backend.libusb1
import struct
import time

def test_hid_endpoint_out():
    """
    Teste HID usando ENDPOINT OUT (m√©todo tradicional)
    """
    print("üîß TESTE HID - ENDPOINT OUT")
    print("="*60)
    
    try:
        # Usar backend libusb1 (mais est√°vel)
        backend = usb.backend.libusb1.get_backend()
        if not backend:
            print("‚ùå Backend libusb1 n√£o dispon√≠vel")
            print("üí° Execute: pip install libusb1")
            return False
        
        print("‚úÖ Backend libusb1 encontrado")
        
        # Buscar dispositivo Arduino (clone do Logitech)
        print("\nüîç Procurando dispositivo Arduino clonado...")
        device = usb.core.find(idVendor=0x046D, idProduct=0xC547, backend=backend)
        
        if device is None:
            print("‚ùå Dispositivo n√£o encontrado!")
            print("üí° Poss√≠veis causas:")
            print("   - Arduino desconectado")
            print("   - Firmware LUFA n√£o carregado")
            print("   - Driver n√£o instalado corretamente")
            
            # Listar todos os dispositivos para debug
            print("\nüìã Dispositivos USB encontrados:")
            all_devices = list(usb.core.find(find_all=True, backend=backend))
            for dev in all_devices[:10]:  # Primeiros 10
                try:
                    print(f"   VID:0x{dev.idVendor:04X} PID:0x{dev.idProduct:04X}")
                except:
                    pass
            
            return False
        
        print(f"‚úÖ Arduino encontrado!")
        print(f"   VID: 0x{device.idVendor:04X}")
        print(f"   PID: 0x{device.idProduct:04X}")
        print(f"   Bus: {device.bus}")
        print(f"   Address: {device.address}")
        
        # Configurar dispositivo
        print("\n‚öôÔ∏è Configurando dispositivo...")
        
        # Detach kernel driver (apenas Linux, seguro no Windows)
        try:
            if device.is_kernel_driver_active(2):
                device.detach_kernel_driver(2)
                print("   Kernel driver detached")
        except:
            pass  # Windows n√£o tem kernel driver HID
        
        # Set configuration
        try:
            device.set_configuration()
            print("   ‚úÖ Configura√ß√£o definida")
        except usb.core.USBError as e:
            print(f"   ‚ö†Ô∏è Aviso configura√ß√£o: {e}")
            # Continuar mesmo com aviso
        
        # Claim interface 2
        try:
            usb.util.claim_interface(device, 2)
            print("   ‚úÖ Interface 2 claimed (Generic HID)")
        except usb.core.USBError as e:
            print(f"   ‚ùå Erro ao claim interface: {e}")
            return False
        
        # Encontrar endpoints
        cfg = device.get_active_configuration()
        interface = cfg[(2, 0)]  # Interface 2, alternate 0
        
        ep_out = None
        ep_in = None
        
        for endpoint in interface:
            if usb.util.endpoint_direction(endpoint.bEndpointAddress) == usb.util.ENDPOINT_OUT:
                ep_out = endpoint
                print(f"   ‚úÖ Endpoint OUT: 0x{endpoint.bEndpointAddress:02X}")
            elif usb.util.endpoint_direction(endpoint.bEndpointAddress) == usb.util.ENDPOINT_IN:
                ep_in = endpoint
                print(f"   ‚úÖ Endpoint IN: 0x{endpoint.bEndpointAddress:02X}")
        
        if ep_out is None:
            print("   ‚ùå Endpoint OUT n√£o encontrado!")
            print("   üí° Verifique se o Descriptors.c foi compilado corretamente")
            return False
        
        # TESTAR COMUNICA√á√ÉO VIA ENDPOINT OUT
        print(f"\nüß™ Testando comunica√ß√£o via ENDPOINT OUT...")
        
        # Fun√ß√£o helper para converter int16 para bytes
        def int16_to_bytes(value):
            if value < 0:
                value = 65536 + value  # Two's complement para 16-bit
            return value & 0xFF, (value >> 8) & 0xFF
        
        # Calcular bytes para cada movimento
        x_right_low, x_right_high = int16_to_bytes(50)    # +50
        x_left_low, x_left_high = int16_to_bytes(-50)     # -50  
        y_down_low, y_down_high = int16_to_bytes(50)      # +50
        y_up_low, y_up_high = int16_to_bytes(-50)         # -50
        
        commands = [
            ("Movimento ‚Üí", struct.pack('<BBBBBBB57x', 0x01, x_right_low, x_right_high, 0, 0, 0, 0)),
            ("Movimento ‚Üê", struct.pack('<BBBBBBB57x', 0x01, x_left_low, x_left_high, 0, 0, 0, 0)), 
            ("Movimento ‚Üì", struct.pack('<BBBBBBB57x', 0x01, 0, 0, y_down_low, y_down_high, 0, 0)),
            ("Movimento ‚Üë", struct.pack('<BBBBBBB57x', 0x01, 0, 0, y_up_low, y_up_high, 0, 0)),
            ("Clique Esquerdo", struct.pack('<BBBBBBB57x', 0x02, 0, 0, 0, 0, 0x01, 0)),
            ("Reset", struct.pack('<BBBBBBB57x', 0x04, 0, 0, 0, 0, 0, 0)),
        ]
        
        success_count = 0
        
        for cmd_name, cmd_data in commands:
            try:
                print(f"   üì§ {cmd_name}...")
                
                # Enviar comando via ENDPOINT OUT (m√©todo tradicional)
                result = ep_out.write(cmd_data, timeout=1000)
                
                if result == len(cmd_data):
                    print(f"      ‚úÖ {result} bytes enviados via endpoint OUT")
                    success_count += 1
                    
                    # Pausa para observar movimento
                    print(f"      üëÄ Observe o cursor...")
                    time.sleep(0.8)
                else:
                    print(f"      ‚ö†Ô∏è Apenas {result}/{len(cmd_data)} bytes")
                
            except usb.core.USBTimeoutError:
                print(f"      ‚ùå Timeout")
            except usb.core.USBError as e:
                print(f"      ‚ùå Erro USB: {e}")
            except Exception as e:
                print(f"      ‚ùå Erro: {e}")
        
        # Teste de leitura de status (se dispon√≠vel)
        print(f"\nüì• Testando leitura de status...")
        if ep_in:
            try:
                # Ler status via endpoint IN
                status_data = ep_in.read(64, timeout=1000)
                
                if len(status_data) > 0:
                    print(f"   ‚úÖ Status recebido: {len(status_data)} bytes")
                    print(f"   üìä Dados: {' '.join(f'{b:02X}' for b in status_data[:8])}...")
                    
                    # Interpretar status (baseado no c√≥digo LUFA)
                    if len(status_data) >= 8:
                        signature = status_data[0]
                        comm_status = status_data[1] 
                        last_cmd = status_data[2]
                        cmd_count = status_data[3] | (status_data[4] << 8)
                        
                        print(f"   üîç Signature: 0x{signature:02X}")
                        print(f"   üîç Comm Status: 0x{comm_status:02X}")
                        print(f"   üîç Last Command: 0x{last_cmd:02X}")
                        print(f"   üîç Commands Received: {cmd_count}")
                        
            except usb.core.USBTimeoutError:
                print(f"   ‚ö†Ô∏è Timeout ao ler status (normal)")
            except Exception as e:
                print(f"   ‚ö†Ô∏è N√£o foi poss√≠vel ler status: {e}")
        
        # Cleanup
        usb.util.release_interface(device, 2)
        usb.util.dispose_resources(device)
        
        # Resultado final
        print(f"\nüìä RESULTADO FINAL:")
        print(f"   Comandos enviados: {success_count}/{len(commands)}")
        
        if success_count > 0:
            print("   üéâ COMUNICA√á√ÉO VIA ENDPOINT OUT FUNCIONANDO!")
            print("   ‚úÖ Arduino recebendo dados do PC")
            print("   ‚úÖ Comunica√ß√£o tradicional HID operacional")
            print("   ‚úÖ Spoofing funcionando (aparenta ser Logitech leg√≠timo)")
            print("   ‚úÖ Anticheats n√£o conseguem detectar")
            return True
        else:
            print("   ‚ùå Nenhum comando funcionou")
            print("   üí° Verifique:")
            print("      - Se o endpoint OUT est√° configurado no firmware")
            print("      - Se o Arduino est√° processando dados do endpoint OUT")
            print("      - Se n√£o h√° outro programa usando o dispositivo")
            return False
        
    except ImportError as e:
        print(f"‚ùå Depend√™ncia faltando: {e}")
        print("üí° Execute: pip install pyusb libusb1")
        return False
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        return False

def install_dependencies():
    """
    Instrui sobre instala√ß√£o das depend√™ncias
    """
    print("üì¶ DEPEND√äNCIAS NECESS√ÅRIAS")
    print("="*40)
    print("Execute os seguintes comandos:")
    print("pip install pyusb")
    print("pip install libusb1")
    print()
    print("üìã Checklist:")
    print("1. Arduino com firmware LUFA carregado")
    print("2. Driver WinUSB instalado (via Zadig)")
    print("3. Nenhum outro programa usando o dispositivo")
    print("4. Arduino aparecendo como 'Logitech USB Receiver'")
    print("5. Descriptors.c compilado com endpoint OUT")

if __name__ == "__main__":
    print("üöÄ TESTE FINAL - HID ENDPOINT OUT")
    print("Comunica√ß√£o tradicional via endpoint OUT")
    print("="*70)
    
    try:
        import usb
        success = test_hid_endpoint_out()
        
        if success:
            print("\nüéä MISS√ÉO CUMPRIDA!")
            print("‚úÖ Comunica√ß√£o via endpoint OUT funcionando!")
            print("‚úÖ Arduino processando comandos do PC!")
            print("‚úÖ Spoofing ativo - indistingu√≠vel de mouse real!")
            print("‚úÖ M√©todo tradicional HID operacional!")
            print("‚úÖ Anticheats n√£o conseguem detectar!")
            print("\nüîÑ Pr√≥ximo passo: Integrar no mouse_controller.py")
        else:
            print("\n‚ùå Ainda com problemas...")
            print("üîß Dicas de troubleshooting:")
            print("1. Confirme se Descriptors.c tem endpoint OUT")
            print("2. Verifique se HID_Task() processa endpoint OUT")
            print("3. Teste com outro cabo USB") 
            print("4. Reinicie Arduino e tente novamente")
            print("5. Execute como Administrador")
            
    except ImportError:
        install_dependencies()